name: Docker Build & Publish

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: naviki-gpx-exporter
  REGISTRY: ghcr.io

jobs:
  build-and-test:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image (test)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Build seulement pour AMD64 lors des tests
          platforms: linux/amd64

      - name: Test Docker image
        run: |
          echo "ðŸ§ª Testing Docker image..."
          
          # Test 1: VÃ©rifier que l'image dÃ©marre
          docker run --rm ${{ env.IMAGE_NAME }}:test --help || exit 1
          
          # Test 2: VÃ©rifier que geckodriver est installÃ©
          docker run --rm --entrypoint geckodriver ${{ env.IMAGE_NAME }}:test --version || exit 1
          
          # Test 3: VÃ©rifier que Firefox est installÃ©
          docker run --rm --entrypoint firefox-esr ${{ env.IMAGE_NAME }}:test --version || exit 1
          
          # Test 4: VÃ©rifier les dÃ©pendances Python
          docker run --rm --entrypoint pip ${{ env.IMAGE_NAME }}:test list | grep selenium || exit 1
          
          echo "âœ… All tests passed!"
        continue-on-error: false

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: github.event_name != 'pull_request'
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Image digest
        if: github.event_name != 'pull_request'
        run: |
          echo "ðŸ“¦ Image published successfully!"
          echo "Image digest: ${{ steps.docker_build.outputs.digest }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_NAME }}:scan
          cache-from: type=gha
          platforms: linux/amd64

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:scan
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true