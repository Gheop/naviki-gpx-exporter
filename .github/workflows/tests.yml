name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  lint:
    name: Linting & Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Black (check)
        run: black --check .

      - name: Flake8
        run: flake8 .

      - name: Pylint (main module only)
        run: |
          # Adapte le nom du module/paquet si besoin
          pylint naviki-gpx-exporter.py --disable=C0114,C0115,C0116 || true

  test:
    name: Unit Tests (${{ matrix.os }}, py${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python: [ '3.9', '3.10', '3.11' ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Show env
        run: |
          python --version
          pip --version
          pip list

      - name: Run unit tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest tests/ --cov=. --cov-report=xml --junitxml=test-results.xml -q

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.os }}-py${{ matrix.python }}
          path: test-results.xml

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-py${{ matrix.python }}
          path: coverage.xml

  security:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install audit tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: pip-audit
        run: |
          pip-audit -r requirements-dev.txt || true

      - name: safety
        run: |
          safety check --full-report || true

  integration-mocked:
    name: Integration Tests (Mocked)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run mocked integration tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          # Si tu as des tests d’intégration marqués, adapte le sélecteur:
          pytest -m "integration or e2e" -q || true

  build-badge:
    name: Update Badge
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Update badge
        run: echo "Tests passed ✅"
