#!/bin/bash
# Script helper pour lancer naviki-gpx-exporter avec Docker facilement

set -e

# Couleurs pour l'output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration par d√©faut
IMAGE_NAME="naviki-gpx-exporter:latest"
OUTPUT_DIR="/tmp/output"

# Fonction d'aide
show_help() {
    cat << EOF
${BLUE}üö¥ Naviki GPX Exporter - Docker Helper${NC}

Usage: $0 [OPTIONS]

Options:
    -u, --username USERNAME    Nom d'utilisateur Naviki
    -p, --password PASSWORD    Mot de passe Naviki
    -t, --token TOKEN         Token OAuth (alternative √† username/password)
    -o, --output DIR          Dossier de sortie (d√©faut: ./output)
    -i, --image IMAGE         Image Docker √† utiliser (d√©faut: $IMAGE_NAME)
    --types TYPES            Types de routes (d√©faut: tous)
    --visible                Mode visible (debug, n√©cessite X11)
    --pull                   T√©l√©charger la derni√®re image avant de lancer
    -h, --help               Afficher cette aide

Exemples:
    # Avec username/password
    $0 -u MonUsername -p 'MonPassword!'
    
    # Avec token OAuth
    $0 -t abc123-def456-ghi789
    
    # Avec dossier de sortie personnalis√©
    $0 -u MonUsername -p 'MonPassword!' -o ~/naviki-backup
    
    # Utiliser l'image officielle de GitHub
    $0 -u MonUsername -p 'MonPassword!' -i ghcr.io/gheop/naviki-gpx-exporter:latest --pull
    
    # Mode debug visible
    $0 -u MonUsername -p 'MonPassword!' --visible
    
    # Seulement les routes enregistr√©es
    $0 -u MonUsername -p 'MonPassword!' --types recordedMy

Variables d'environnement:
    NAVIKI_USERNAME    Username par d√©faut
    NAVIKI_PASSWORD    Password par d√©faut
    NAVIKI_TOKEN       Token par d√©faut

EOF
}

# Parsing des arguments
USERNAME="${NAVIKI_USERNAME:-}"
PASSWORD="${NAVIKI_PASSWORD:-}"
TOKEN="${NAVIKI_TOKEN:-}"
TYPES="routedAll,recordedMy,recordedOthers"
VISIBLE=false
PULL=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -u|--username)
            USERNAME="$2"
            shift 2
            ;;
        -p|--password)
            PASSWORD="$2"
            shift 2
            ;;
        -t|--token)
            TOKEN="$2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        -i|--image)
            IMAGE_NAME="$2"
            shift 2
            ;;
        --types)
            TYPES="$2"
            shift 2
            ;;
        --visible)
            VISIBLE=true
            shift
            ;;
        --pull)
            PULL=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Option inconnue: $1${NC}"
            show_help
            exit 1
            ;;
    esac
done

# V√©rifications
if [[ -z "$TOKEN" ]] && [[ -z "$USERNAME" || -z "$PASSWORD" ]]; then
    echo -e "${RED}‚ùå Erreur: Vous devez fournir soit:${NC}"
    echo "   - Un token OAuth avec -t/--token"
    echo "   - Username ET password avec -u/--username et -p/--password"
    echo ""
    show_help
    exit 1
fi

# Pull de l'image si demand√©
if [[ "$PULL" == true ]]; then
    echo -e "${BLUE}üì• T√©l√©chargement de l'image $IMAGE_NAME...${NC}"
    docker pull "$IMAGE_NAME"
fi

# V√©rifier que l'image existe
if ! docker image inspect "$IMAGE_NAME" &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Image $IMAGE_NAME non trouv√©e localement${NC}"
    echo -e "${BLUE}üì• Tentative de t√©l√©chargement...${NC}"
    if ! docker pull "$IMAGE_NAME"; then
        echo -e "${RED}‚ùå Impossible de t√©l√©charger l'image${NC}"
        echo "   Essayez de la builder localement avec: make build"
        exit 1
    fi
fi

# Cr√©er le dossier de sortie
mkdir -p "$OUTPUT_DIR"

# Pr√©parer les arguments Docker
DOCKER_ARGS=(
    "run"
    "--rm"
    "-v" "$(realpath "$OUTPUT_DIR"):/output"
)

# Mode visible (X11)
if [[ "$VISIBLE" == true ]]; then
    if [[ -z "$DISPLAY" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Variable DISPLAY non d√©finie, mode visible d√©sactiv√©${NC}"
    else
        echo -e "${BLUE}üëÅÔ∏è  Mode visible activ√©${NC}"
        DOCKER_ARGS+=("-e" "DISPLAY=$DISPLAY")
        DOCKER_ARGS+=("-v" "/tmp/.X11-unix:/tmp/.X11-unix")
        
        # Autoriser les connexions X11 (n√©cessaire sur certains syst√®mes)
        xhost +local:docker &> /dev/null || true
    fi
fi

# Image
DOCKER_ARGS+=("$IMAGE_NAME")

# Arguments du script Python
SCRIPT_ARGS=()

if [[ -n "$TOKEN" ]]; then
    SCRIPT_ARGS+=("--token" "$TOKEN")
else
    SCRIPT_ARGS+=("--username" "$USERNAME" "--password" "$PASSWORD")
fi

SCRIPT_ARGS+=("--output" "/output")
SCRIPT_ARGS+=("--types" "$TYPES")

if [[ "$VISIBLE" == true ]]; then
    SCRIPT_ARGS+=("--visible")
else
    SCRIPT_ARGS+=("--headless")
fi

# Affichage de la configuration
echo -e "${GREEN}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
echo -e "${GREEN}‚îÇ  üö¥ Naviki GPX Exporter - Docker           ‚îÇ${NC}"
echo -e "${GREEN}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
echo ""
echo -e "${BLUE}üìÅ Dossier de sortie:${NC} $(realpath "$OUTPUT_DIR")"
echo -e "${BLUE}üê≥ Image Docker:${NC} $IMAGE_NAME"
if [[ -n "$TOKEN" ]]; then
    echo -e "${BLUE}üîë Authentification:${NC} Token OAuth"
else
    echo -e "${BLUE}üîë Authentification:${NC} Username/Password"
fi
echo -e "${BLUE}üîç Types de routes:${NC} $TYPES"
echo ""

# Lancement
echo -e "${GREEN}üöÄ Lancement de l'export...${NC}"
echo ""

# Ex√©cuter Docker
docker "${DOCKER_ARGS[@]}" "${SCRIPT_ARGS[@]}"

EXIT_CODE=$?

# Nettoyage X11
if [[ "$VISIBLE" == true ]]; then
    xhost -local:docker &> /dev/null || true
fi

# Message final
echo ""
if [[ $EXIT_CODE -eq 0 ]]; then
    echo -e "${GREEN}‚úÖ Export termin√© avec succ√®s!${NC}"
    echo -e "${BLUE}üìÅ Fichiers disponibles dans:${NC} $(realpath "$OUTPUT_DIR")"
    
    # Afficher le nombre de fichiers GPX
    GPX_COUNT=$(find "$OUTPUT_DIR" -name "*.gpx" 2>/dev/null | wc -l)
    if [[ $GPX_COUNT -gt 0 ]]; then
        echo -e "${BLUE}üìä Nombre de fichiers GPX:${NC} $GPX_COUNT"
    fi
else
    echo -e "${RED}‚ùå L'export a √©chou√© (code: $EXIT_CODE)${NC}"
fi

exit $EXIT_CODE